---
import Layout from "../../layouts/Layout.astro";
import { AuthFormLayout } from "../../components/auth/AuthFormLayout";
import { Button } from "../../components/ui/button";
import { CheckCircle2, AlertCircle, Loader2 } from "lucide-react";

// Set to SSR mode to ensure it's always rendered on the server
export const prerender = false;

// In a real implementation, this would come from the token verification
// For now, we'll simulate different states with hardcoded values
const token = Astro.url.searchParams.get('token');
const type = Astro.url.searchParams.get('type');

// This would be determined by token verification in real implementation
let verificationStatus: 'pending' | 'success' | 'error' = 'success';
let message = "";

// Simulate verify email flow
if (!token || !type) {
  // No token or type provided - show the "check your email" screen
  verificationStatus = 'pending';
  message = "We've sent an email verification link to your email address. Please check your inbox and click the link to verify your account.";
} else if (type === 'email_verification') {
  if (token === 'valid-token') {
    verificationStatus = 'success';
    message = "Your email has been verified successfully!";
  } else {
    verificationStatus = 'error';
    message = "There was an error verifying your email. The link may have expired or is invalid.";
  }
} else {
  verificationStatus = 'error';
  message = "Invalid verification type.";
}
---

<Layout title="Verify Email">
  <main class="flex flex-col items-center justify-center min-h-screen py-12 bg-background">
    <AuthFormLayout 
      title="Email Verification" 
      client:load
    >
      <div class="flex flex-col items-center space-y-4 py-4">
        {verificationStatus === 'pending' && (
          <div class="text-center space-y-4">
            <div class="flex justify-center">
              <Loader2 className="size-16 text-primary animate-spin" />
            </div>
            <p class="text-muted-foreground">{message}</p>
            <p class="text-sm text-muted-foreground">
              Didn't receive an email? Check your spam folder or 
              <a href="/auth/verify-email" class="text-primary hover:underline">request a new verification link</a>.
            </p>
          </div>
        )}
        
        {verificationStatus === 'success' && (
          <div class="text-center space-y-4">
            <div class="flex justify-center">
              <CheckCircle2 className="size-16 text-green-500" />
            </div>
            <p class="text-muted-foreground">{message}</p>
            <div>
              <a href="/auth/login">
                <Button>Continue to Login</Button>
              </a>
            </div>
          </div>
        )}
        
        {verificationStatus === 'error' && (
          <div class="text-center space-y-4">
            <div class="flex justify-center">
              <AlertCircle className="size-16 text-destructive" />
            </div>
            <p class="text-muted-foreground">{message}</p>
            <div>
              <a href="/auth/login">
                <Button variant="outline">Back to Login</Button>
              </a>
            </div>
          </div>
        )}
      </div>
    </AuthFormLayout>
  </main>
</Layout> 