---
import { createServerSupabaseClient } from "../../db/supabase";
import type { TextWithQuestionsDTO } from "../../types";
import type { User } from "@supabase/supabase-js";
import { formatDistanceToNow } from "date-fns";
import Layout from "../../layouts/Layout.astro";

// Get text ID from params
const { textId } = Astro.params;

// Get user from Astro.locals
const user = (Astro.locals as { user?: User }).user;

// Create server-side Supabase client
const supabase = createServerSupabaseClient(Astro.cookies);

// Fetch text data with related entities and questions in a single query
const { data: exerciseData, error: textError } = await supabase
  .from("texts")
  .select(
    `
    *,
    language:language_id(*),
    proficiency_level:proficiency_level_id(*),
    questions(*)
  `
  )
  .eq("id", textId)
  .eq("is_deleted", false)
  .single<TextWithQuestionsDTO>();

if (textError) {
  return Astro.redirect("/404");
}

// Check if user has access to this exercise
if (exerciseData.visibility === "private" && (!user || exerciseData.user_id !== user.id)) {
  return Astro.redirect("/404");
}
---

<Layout title={`${exerciseData.title || exerciseData.topic} - Exercise Details`}>
  <div class="relative w-full min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-blue-900">
    <main class="container mx-auto py-8 px-4">
      <div class="max-w-4xl mx-auto">
        <div class="bg-white/10 backdrop-blur-sm rounded-lg border border-white/20 shadow-lg p-6">
          <div class="flex justify-between items-start mb-6">
            <div>
              <h1 class="text-2xl font-bold text-white">
                {exerciseData.title || exerciseData.topic}
              </h1>
              <p class="text-gray-300 mt-2">
                Created {formatDistanceToNow(new Date(exerciseData.created_at), { addSuffix: true })}
              </p>
            </div>
            <div class="flex gap-2">
              <span
                class={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold ${
                  exerciseData.visibility === "public"
                    ? "bg-purple-500/30 text-purple-100"
                    : "bg-indigo-500/30 text-indigo-100"
                }`}
              >
                {exerciseData.visibility}
              </span>
              <span
                class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold bg-indigo-500/30 text-indigo-100"
              >
                {exerciseData.language?.name ?? "Unknown Language"}
              </span>
              <span
                class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold bg-purple-500/30 text-purple-100"
              >
                {exerciseData.proficiency_level?.name ?? "Unknown Level"}
              </span>
            </div>
          </div>

          <div class="space-y-6">
            <div>
              <h3 class="text-lg font-semibold mb-2 text-white">Content</h3>
              <div class="prose prose-sm max-w-none text-gray-200">
                {exerciseData.content.split("\n").map((paragraph: string) => <p class="mb-4">{paragraph}</p>)}
              </div>
            </div>

            <hr class="border-white/20" />

            <div class="grid grid-cols-2 gap-4 text-sm">
              <div>
                <h4 class="font-medium text-white">Word Count</h4>
                <p class="text-gray-300">{exerciseData.word_count} words</p>
              </div>
              <div>
                <h4 class="font-medium text-white">Topic</h4>
                <p class="text-gray-300">{exerciseData.topic}</p>
              </div>
            </div>

            <hr class="border-white/20" />

            <div class="grid grid-cols-2 gap-4 text-sm">
              <div>
                <h4 class="font-medium text-white">Language</h4>
                <p class="text-gray-300">
                  {exerciseData.language?.name ?? "Unknown Language"} ({exerciseData.language?.code ?? "??"})
                </p>
              </div>
              <div>
                <h4 class="font-medium text-white">Proficiency Level</h4>
                <p class="text-gray-300">{exerciseData.proficiency_level?.name ?? "Unknown Level"}</p>
              </div>
            </div>

            <hr class="border-white/20" />

            <div>
              <h3 class="text-lg font-semibold mb-4 text-white">Questions</h3>
              {
                exerciseData.questions && exerciseData.questions.length > 0 ? (
                  <div class="space-y-4">
                    {exerciseData.questions.map((question, index) => (
                      <div class="bg-white/5 rounded-lg p-4">
                        <div class="flex items-start gap-3">
                          <span class="flex-shrink-0 w-6 h-6 flex items-center justify-center rounded-full bg-indigo-500/30 text-indigo-100 text-sm font-medium">
                            {index + 1}
                          </span>
                          <p class="text-gray-200">{question.content}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <p class="text-gray-400 italic">No questions available for this exercise.</p>
                )
              }
            </div>

            <div class="flex justify-end mt-6">
              <a
                href={`/exercises/${exerciseData.id}/attempt`}
                class="px-4 py-2 bg-white text-indigo-900 rounded hover:bg-gray-100"
              >
                Take Exercise
              </a>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>
</Layout>
